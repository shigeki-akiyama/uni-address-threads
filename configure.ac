#                                               -*- Autoconf -*-
# Process this file with autoconf to produce a configure script.
#
# 
# this file is initially generated by running autoscan
# in this directory and then modified to add necessary
# stuff
AC_PREREQ([2.69])
AC_INIT([madm2], [0.1], [madm@eidos.ic.i.u-tokyo.ac.jp])
AC_CONFIG_AUX_DIR([comm/misc/build-aux])
AC_CONFIG_MACRO_DIR([comm/misc/m4])
AC_CONFIG_SRCDIR([comm/src/madm_comm.cc])
AC_CONFIG_HEADERS([uth/include/uth/acconfig.h])
# subdir-objects necessary for compiling uth/worker.cc etc. in 
# respective subdirs
AM_INIT_AUTOMAKE([foreign subdir-objects -Wall -Werror])

# avoid executing autotools on the user side
AM_MAINTAINER_MODE([disable])

# Checks for programs.

# use mpi++ to compile everything
# non-standard commands (e.g., mpig++px) must be
# given via MPICC=mpig++px
AX_PROG_CXX_MPI([true])
AX_PROG_CC_MPI([true])

# install
AC_PROG_INSTALL

# ar
# added in reaction to:
# /usr/share/automake-1.14/am/ltlibrary.am: warning: 'libuth.la': linking libtool libraries using a non-POSIX
# /usr/share/automake-1.14/am/ltlibrary.am: archiver requires 'AM_PROG_AR' in 'configure.ac'
AM_PROG_AR

# assembler
# added for uni/context.S and iso/myth_context.S
AM_PROG_AS

if false; then

# Checks for libraries.

# Checks for header files.
AC_CHECK_HEADERS([fcntl.h inttypes.h limits.h stddef.h stdint.h stdlib.h string.h sys/time.h unistd.h])

# Checks for typedefs, structures, and compiler characteristics.
AC_CHECK_HEADER_STDBOOL
AC_C_INLINE
AC_TYPE_INT64_T
AC_TYPE_PID_T
AC_TYPE_SIZE_T
AC_TYPE_UINT16_T
AC_TYPE_UINT32_T
AC_TYPE_UINT64_T
AC_TYPE_UINT8_T

# Checks for library functions.
AC_FUNC_ALLOCA
AC_FUNC_FORK
# this one ends up defining malloc as rpl_malloc and causes a compilation
# error with cstdlib (at a line containing ::malloc)
#AC_FUNC_MALLOC
AC_FUNC_MMAP
AC_CHECK_FUNCS([clock_gettime floor ftruncate gettimeofday memmove memset munmap pow select])
AC_SEARCH_LIBS([shm_open], [rt], [], [])

fi

#
# custom options and checks
#
#


#
# -Wl,-no_pie option for Darwin to disable address space layout randomization
#
AC_CANONICAL_HOST

case $host_os in
  darwin*)
    LDFLAGS="-Wl,-no_pie $LDFLAGS"
  ;;
esac


#
# check if C++11 is supported
# (necessary for variadic template. the macro below
# automatically adds -std=gnu++11 or -std=c++11.
#

AX_CXX_COMPILE_STDCXX_0X
AS_IF([test "$ax_cv_cxx_compile_cxx0x_native" = "yes"], 
      # compiler support C++0x without any flag
      [],
      [AS_IF([test "$ax_cv_cxx_compile_cxx0x_gxx" = "yes"],
             # compiler support C++0x with -std=gnu++0x
             [CXXFLAGS="-std=gnu++0x $CXXFLAGS"],
             [AS_IF([test "$ax_cv_cxx_compile_cxx0x_cxx" = "yes"],
                    # compiler support C++0x with -std=c++0x
                    [CXXFLAGS="-std=c++0x $CXXFLAGS"],
                    [AC_MSG_ERROR([cannot find an option to support C++0x])])])])

AC_SUBST([ARMCI_INCLUDE_FLAG])
#AX_CXX_COMPILE_STDCXX_11([],[mandatory])

#
# --madi-debug-level=x --> -DMADI_DEBUG_LEVEL=x
#
AC_ARG_WITH([madi-debug-level],
            [AS_HELP_STRING([--with-madi-debug-level=n],
                            [Set debug level to n. Default: 0])],
            [madi_debug_level="$withval"],
            [madi_debug_level=0])

AC_DEFINE_UNQUOTED([MADI_DEBUG_LEVEL],[$madi_debug_level],[MADI Debug Level])

#
# --with-thread-type={uni,iso} 
# depending on the arg, define Makefile.am conditional
# MADI_THREAD_TYPE_UNI and MADI_THREAD_TYPE_ISO to 0 or 1
# Makefile.am then add appropriate files to sources
#
#

AC_ARG_WITH([thread-type],
            [AS_HELP_STRING([--with-thread-type=t],
                            [Set thread type to t. Default: uni])],
            [thread_type="MADI_THREAD_TYPE_$(echo $withval | tr [[a-z]] [[A-Z]])"],
            [thread_type="MADI_THREAD_TYPE_UNI"])

# define MADI_THREAD_TYPE MADI_THREAD_TYPE_{UNI,ISO}
# MADI_THREAD_TYPE_{UNI,ISO} are defined in constants.h
AC_DEFINE_UNQUOTED([MADI_THREAD_TYPE],[$thread_type],[Thread type])
# used in Makefile.am to add appropriate source files 
AM_CONDITIONAL([MADI_THREAD_TYPE_UNI], [test "x$thread_type" = "xMADI_THREAD_TYPE_UNI"])
AM_CONDITIONAL([MADI_THREAD_TYPE_ISO], [test "x$thread_type" = "xMADI_THREAD_TYPE_ISO"])

#
# --with-comm-layer={seq,fx10}
# depending on the arg, define Makefile.am conditional
# COMM_LAYER_SHMEM and COMM_LAYER_FX10 to 0 or 1
# Makefile.am then add appropriate files to sources
#

AC_ARG_WITH([comm-layer],
            [AS_HELP_STRING([--with-comm-layer=c],
                            [Set comm layer to c. Default: shmem])],
            [comm_layer="MADI_COMM_LAYER_$(echo $withval | tr [[a-z]] [[A-Z]])"],
            [comm_layer="MADI_COMM_LAYER_SHMEM"])

# define MADI_COMM_LAYER MADI_COMM_LAYER_{SEQ,SHMEM,MPI3,FX10}
#AC_DEFINE_UNQUOTED([MADI_COMM_LAYER],[$comm_layer],[MADI comm layer])
# used in Makefile.am to add appropriate source files 
AM_CONDITIONAL([MADI_COMM_LAYER_SEQ],   [test "x$comm_layer" = "xMADI_COMM_LAYER_SEQ"])
AM_CONDITIONAL([MADI_COMM_LAYER_SHMEM], [test "x$comm_layer" = "xMADI_COMM_LAYER_SHMEM"])
AM_CONDITIONAL([MADI_COMM_LAYER_MPI3],  [test "x$comm_layer" = "xMADI_COMM_LAYER_MPI3"])
AM_CONDITIONAL([MADI_COMM_LAYER_FX10],  [test "x$comm_layer" = "xMADI_COMM_LAYER_FX10"])

#
# --with-armci=location
# based on the value set, define
# -I$location/include and -L$location/lib
#

AC_LANG_PUSH([C++])
AC_LANG_CPLUSPLUS
AC_ARG_WITH([armci],
            [AS_HELP_STRING([--with-armci=yes/no],
                            [Use ARMCI library in path. Default: yes])],
            [AC_CHECK_HEADERS([armci.h], [],
	      [AC_MSG_ERROR([cannot find armci.h, bailing out])])])
AC_LANG_POP


if false; then

AC_ARG_WITH([armci],
            [AS_HELP_STRING([--with-armci=yes/no],
                            [Use ARMCI library in path. Default: yes])],
            [ARMCI_PREFIX="$withval"],
            [ARMCI_PREFIX=""])


# if --with-armci=loc is given, add -I<loc>/include to tests
AS_IF([test "x$ARMCI_PREFIX" != x],
	    [ARMCI_INCLUDE_FLAG="-I$ARMCI_PREFIX/include"],
	    [ARMCI_INCLUDE_FLAG=""])

# add flags to CFLAGS and see if we can include armci.h
my_save_cflags="$CFLAGS"
my_save_cppflags="$CPPFLAGS"
CFLAGS="$CFLAGS $ARMCI_INCLUDE_FLAG"
CPPFLAGS="$CPPFLAGS $ARMCI_INCLUDE_FLAG"
AC_CHECK_HEADERS([armci.h], [],
  [AC_MSG_ERROR([cannot find armci.h, bailing out])])


#
# do not bother to check library
# (1) it's complicated; we need to search lib and lib64.
#     perhaps it's something user should give via LDFLAGS
# (2) if we check it -larmci is automatically added,
#     which is annoying for disable_aslr
#

AC_LANG_PUSH([C++])
AC_LANG_CPLUSPLUS

# now we try to link with armci, with -L<loc>/lib and -L<loc>/lib64
AS_IF([test "x$ARMCI_PREFIX" != x],
      [ARMCI_LIB_FLAGs="-L$ARMCI_PREFIX/lib -L$ARMCI_PREFIX/lib64"],
      [ARMCI_LIB_FLAGs=""])

for libflag in $ARMCI_LIB_FLAGs "" ; do
    my_save_ldflags="$LDFLAGS" ;
    LDFLAGS="$LDFLAGS $libflag" ;
    AC_SEARCH_LIBS([ARMCI_Init], [armci], 
      [ARMCI_LIB_FLAG="$libflag";     LDFLAGS="$my_save_ldflags"; break], 
      # ac_cv_search_ARMCI_Init is set by AC_SEARCH_LIBS to no;
      # unset it to clear cached result (otherwise the next iteration uses
      # the cached result)
      [unset ac_cv_search_ARMCI_Init; LDFLAGS="$my_save_ldflags"])
done;

AS_IF([test "x$ac_cv_search_ARMCI_Init" = x],
     [AC_MSG_ERROR([cannot find armci library, bailing out])],
     [AC_MSG_NOTICE([succeeded with $ARMCI_LIB_FLAG])])

AC_SUBST([ARMCI_LIB_FLAG])
AC_LANG_POP([C++])

CFLAGS="$my_save_cflags"
CPPFLAGS="$my_save_cppflags"

# automatic?
AC_SUBST([ARMCI_INCLUDE_FLAG])

fi

#
# here we go
#

LT_INIT([disable-shared])
AC_CONFIG_FILES([Makefile
                 uth/Makefile
		 uth/include/Makefile
                 uth/src/Makefile
                 uth/tools/Makefile
                 uth/tools/uthrun/Makefile
                 uth/examples/Makefile
                 uth/examples/plain/Makefile
                 uth/examples/overhead/Makefile
                 uth/examples/flat/Makefile
                 uth/examples/bin/Makefile
                 uth/examples/bin_lambda/Makefile
                 uth/examples/uts/Makefile
                 uth/examples/nqueens/Makefile])
AC_CONFIG_SUBDIRS([comm])
AC_OUTPUT
